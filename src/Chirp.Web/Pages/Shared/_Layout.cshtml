@using Microsoft.AspNetCore.Components.Web

<!DOCTYPE html>
<html lang="en">

<head>
    <title>@ViewData["Title"]</title>
    <link rel="icon" type="image/png" href="/favicon/favicon.ico" />
    <link rel="stylesheet" href="/css/index.css" type="text/css" />
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css" />
</head>

<body>
    <div class="header">
        <a style="justify-self: center" href="/"><img class="logo" src="/images/icon1.png" alt="Icon1" /></a>
        <form id="navSearchForm" action="search">
            <input id="navSearchInput" class="text-box" name="SearchQuery" type="text" placeholder="Search for user">
        </form>
        <div>
            <ul id="navSearchOutput"></ul>
        </div>
        <div>
            @if (User.Identity != null && User.Identity.IsAuthenticated)
            {
                <p>@User.Identity.Name</p>

                <div class="nav-wrapper">
                    <span class="nav-link"><a href="/">Public Timeline</a></span>
                    <span class="nav-link"><a href="/cheep">Cheeps</a></span>
                </div>
            }

            <div class="line"></div>
            <div class=root>
                <div class=container>
                    <div class="header nav-wrapper" style="min-height: 60px">
                        <h2>@ViewData["Title"]</h2>
                        @await Html.PartialAsync("_SendCheep")
                        <div>
                            <button class="skip-btn prev" onclick="skipPages(-1)"></button>
                            <button class="skip-btn" onclick="skipPages(1)"></button>
                        </div>
                    </div>
                    @RenderBody()
                </div>
                <div class=footer>
                    Chirp &mdash; An ASP.NET Application
                </div>
            </div>

            <a href="/Identity/Account/Logout">Logout</a>
            }
            else
            {
            <div style="display: flex; gap: 1.5rem;">
                <a class="btn" role="button" href="/Identity/Account/Login">Login</a>
                <a class="btn btn-primary" role="button" href="/Identity/Account/Register">Register</a>
            </div>
            }
            </header>
            <div class="line"></div>
            <div class=root>
                <div class=container>
                    <div class="header nav-wrapper" style="min-height: 60px">
                        <h2>@ViewData["Title"]</h2>
                        @await Html.PartialAsync("_SendCheep")
                        <div>
                            <button class="skip-btn prev" onclick="skipPages(-1)"></button>
                            <button class="skip-btn" onclick="skipPages(1)"></button>
                        </div>
                    </div>

                    @RenderBody()
                </div>
                <footer>
                    Chirp &mdash; An ASP.NET Application
                </footer>

                <script>
                    function skipPages(pagesToSkip) {
                        if (pagesToSkip == 0) throw new Error("pagesToSkip cannot be 0");
                        const urlParams = new URLSearchParams(window.location.search);
                        const currentPageNum = parseInt(urlParams.get("page")) || 1;
                        const newPageNum = currentPageNum + pagesToSkip;
                        if (newPageNum < 1) return;

                        // if root page or individual author page
                        if (!urlParams.has("SearchQuery")) {
                            // string manipulation to remove leading slash for authors page
                            window.location.href = `${window.location.pathname.replace("/", "")}?page=${newPageNum}`;
                            return;
                        };
                        // For Search page
                        const searchQuery = urlParams.get("SearchQuery") || "";
                        window.location.href = `/search?SearchQuery=${searchQuery}&page=${newPageNum}`;
                    }


                    document.addEventListener("DOMContentLoaded", function () {
                        const searchInput = document.getElementById("navSearchInput");

                        searchInput.addEventListener("input", async function (event) {

                            const searchQuery = event.target.value;
                            try {
                                const response = await fetch(`/searchField?searchQuery=${encodeURIComponent(searchQuery)}&page = 1`);
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
                                const data = await response.json();

                                const navSearchOutput = document.getElementById("navSearchOutput");
                                navSearchOutput.innerHTML = "";
                                data.forEach((user) => {
                                    let name = user.userName;

                                    const li = document.createElement("li");
                                    li.className = "cheep-wrapper";
                                    li.innerHTML = `
                                        <a href="/${name}" class="cheep-avatar">
                                            ${name.charAt(0)}
                                        </a>
                                        <div class="cheep">
                                            <div class="cheep-user">
                                                <a class="cheep-author" href="/${name}">${name}</a>
                                            </div>
                                        </div>
                                    `;
                                    navSearchOutput.appendChild(li);
                                });
                            }
                            catch (error) {
                                console.error('There was a problem with the fetch operation:', error);
                            }
                        });
                    });
                </script>
</body>
@await RenderSectionAsync("Scripts", required: false)

</html>
